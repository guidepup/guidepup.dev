"use strict";(self.webpackChunk_guidepup_guidepup_dev=self.webpackChunk_guidepup_guidepup_dev||[]).push([[642],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,v=d["".concat(u,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(v,i(i({ref:t},c),{},{components:n})):a.createElement(v,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),r=n(6010),l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},5488:function(e,t,n){n.d(t,{Z:function(){return m}});var a=n(3117),r=n(7294),l=n(6010),i=n(2389),o=n(7392),u=n(7094),s=n(2466),c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:i,defaultValue:d,values:m,groupId:v,className:h}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,o.l)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===d?d:d??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,u.U)(),[S,N]=(0,r.useState)(g),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,s.o5)();if(null!=v){const e=k[v];null!=e&&e!==S&&b.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),a=b[n].value;a!==S&&(T(t),N(a),null!=v&&w(v,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":i},h)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>x.push(e),onKeyDown:O,onClick:E},i,{className:(0,l.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":S===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function m(e){const t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},3216:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p}});var a=n(3117),r=(n(7294),n(3905)),l=n(5488),i=n(5162);const o={title:"Virtual Screen Reader",description:"Getting started with Guidepup Virtual Screen Reader for screen reader automation in accessibility unit testing"},u="Virtual Screen Reader",s={unversionedId:"virtual",id:"virtual",title:"Virtual Screen Reader",description:"Getting started with Guidepup Virtual Screen Reader for screen reader automation in accessibility unit testing",source:"@site/docs/virtual.md",sourceDirName:".",slug:"/virtual",permalink:"/docs/virtual",draft:!1,editUrl:"https://github.com/guidepup/guidepup.dev/tree/main/docs/virtual.md",tags:[],version:"current",frontMatter:{title:"Virtual Screen Reader",description:"Getting started with Guidepup Virtual Screen Reader for screen reader automation in accessibility unit testing"},sidebar:"docs",previous:{title:"Real World Example",permalink:"/docs/example"},next:{title:"Support Matrix",permalink:"/docs/support"}},c={},p=[{value:"Contents",id:"contents",level:2},{value:"Installation",id:"installation",level:2},{value:"First Virtual Screen Reader Code",id:"first",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"virtual-screen-reader"},"Virtual Screen Reader"),(0,r.kt)("p",null,"Guidepup Virtual Screen Reader is a headless screen reader driver for unit test automation."),(0,r.kt)("p",null,"It aims to provide a reliable set of APIs to automate your screen reader unit test workflows in JavaScript the same you as would for mouse or keyboard based scenarios."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mirrors Real User Experience")," - assert on what users really do and hear when using screen readers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Test Framework Agnostic")," - run with Jest, with Playwright, as an independent script, no vendor lock-in."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"UI Framework Agnostic")," - want to use React, Vue, Solid, Svelte, etc.? All good here! Works with any UI framework, and plays nicely with the ",(0,r.kt)("a",{parentName:"li",href:"https://testing-library.com/"},"Testing Library")," suite."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fast Feedback")," - avoid the cumbersome overhead of running an e2e test with a running screen reader by running virtually over the provided DOM.")),(0,r.kt)("h2",{id:"contents"},"Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./virtual#installation"},"Installation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./virtual#first"},"First Virtual Screen Reader Code"))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install Guidepup to your project:"),(0,r.kt)(l.Z,{groupId:"pm-flavor",defaultValue:"yarn",values:[{label:"Yarn",value:"yarn"},{label:"NPM",value:"npm"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D @guidepup/virtual-screen-reader\n"))),(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @guidepup/virtual-screen-reader\n")))),(0,r.kt)("h2",{id:"first"},"First Virtual Screen Reader Code"),(0,r.kt)("p",null,"Let's automate our Virtual Screen Reader!"),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," as our test runner, create ",(0,r.kt)("inlineCode",{parentName:"p"},"example.test.js")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"example.test.ts")," for TypeScript) to define your screen reader unit test code."),(0,r.kt)(l.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"Typescript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { virtual } from "@guidepup/virtual-screen-reader";\n\ntest("should navigate to the input and announce the placeholder", async () => {\n  document.body.innerHTML = `\n  <label id="label1">Search for topics</label>\n  <input type="text" aria-labelledby="label1" value="" placeholder="Search..."/>\n  `;\n\n  // Start the Virtual Screen Reader.\n  await virtual.start({ container: document.body });\n\n  // Move to the label element.\n  await virtual.next();\n\n  // Move to the input element.\n  await virtual.next();\n\n  // Expect on the spoken phrase for the input element.\n  expect(await virtual.lastSpokenPhrase()).toEqual(\n    "textbox, Search for topics, placeholder Search..."\n  );\n\n  // Stop the Virtual Screen Reader.\n  await virtual.stop();\n});\n'))),(0,r.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { virtual } = require("@guidepup/virtual-screen-reader");\n\ntest("should navigate to the input and announce the placeholder", async () => {\n  document.body.innerHTML = `\n  <label id="label1">Search for topics</label>\n  <input type="text" aria-labelledby="label1" value="" placeholder="Search..."/>\n  `;\n\n  // Start the Virtual Screen Reader.\n  await virtual.start({ container: document.body });\n\n  // Move to the label element.\n  await virtual.next();\n\n  // Move to the input element.\n  await virtual.next();\n\n  // Expect on the spoken phrase for the input element.\n  expect(await virtual.lastSpokenPhrase()).toEqual(\n    "textbox, Search for topics, placeholder Search..."\n  );\n\n  // Stop the Virtual Screen Reader.\n  await virtual.stop();\n});\n')))),(0,r.kt)("p",null,"Running our test with ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," we should see something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"PASS  test/virtual.test.ts\n  \u2713 should navigate to the input and announce the placeholder (42 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.361 s\nRan all test suites matching /virtual.test/i.\n\nWatch Usage: Press w to show more.\n")))}m.isMDXComponent=!0}}]);